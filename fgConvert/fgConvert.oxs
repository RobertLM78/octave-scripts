#! /usr/bin/octave -qf
# Title: fgConvert.oxs - FlightGear pilot conversions
# Version: 1.1 - April 2017
# Author: Robert Lock - beannachtai@homtail.com
# License: GPL v3
# About: Convert altitudes and distances between SI and BS - Also calculate the
#        descent distance for a given angle of descent.  Most code is based on
#        dConvert_m.m, so it will begin with a beta version number (1.0).
# -----------------------------------------------------------------------------
clear,clc,close all
# Initializations
Chs = 0;
mTft = 3750/1143; ftTm = 1143/3750; kmTmi = 125000/201168; miTkm = 201168/125000;
# Menu
menuPart1 = ["fgConvert-1.1";"Altitude: m to ft";"Altitude: ft to m";"Distance: km to mi";"Distance: mi to km"];
menuPart2 = ["Angle: dms to dec";"Angle: dec to dms";"Descent calculator";"Quit"];
MenuList = [menuPart1;menuPart2]; clear menuPart1 menuPart2
#####   Main Program Loop   ###################################################
while Chs ~= 8
	Chs = menu(MenuList);
	if Chs == 1     # Altitude: m to ft
		d = input("Enter the meters: ","s"); d = str2double(d);
		while d < 0 || isnan(d)
			fprintf("Out of range: enter a postive distance.\n")
			d = input("Enter the meters: ","s"); d = str2double(d);
		endwhile
		D = mTft*d;
		fprintf("%0.2f meters is %0.2f feet.\n\n",d,D);
	elseif Chs == 2 # Altitude: ft to m
		d = input("Enter the feet: ","s"); d = str2double(d);
		while d < 0 || isnan(d)
			fprintf("Out of range: enter a postive distance.\n")
			d = input("Enter the feet: ","s"); d = str2double(d);
		endwhile
		D = ftTm*d;
		fprintf("%0.2f feet is %0.2f meters.\n\n",d,D);
	elseif Chs == 3 # Distance: km to mi
		d = input("Enter the kilometers: ","s"); d = str2double(d);
		while d < 0 || isnan(d)
			fprintf("Out of range: enter a postive distance.\n")
			d = input("Enter the kilometers: ","s"); d = str2double(d);
		endwhile
		D = kmTmi*d;
		fprintf("%0.2f kilometers is %0.2f miles.\n\n",d,D);
	elseif Chs == 4 # Distance: mi to km

		d = input("Enter the miles: ","s"); d = str2double(d);
		while d < 0 || isnan(d)
			fprintf("Out of range: enter a postive distance.\n")
			d = input("Enter the miles: ","s"); d = str2double(d);
		endwhile
		D = miTkm*d;
		fprintf("%0.2f miles is %0.2f kilometers.\n\n",d,D);
	elseif Chs == 5 # Angle: dms to dec
		Degs = input("Angle degrees (0-180⁰, no decimals): ","s");
		DegTmp = Degs; Degs = str2double(Degs);
		while Degs < 0 || Degs > 180 || isnan(Degs) || any(toascii(DegTmp) == 46)
			fprintf("Out of range: 0 and 180 degrees, please.\n")
			Degs = input("Angle degrees (0-180⁰, no decimals): ","s");
			DegTmp = Degs; Degs = str2double(Degs);
		endwhile
		minutes = input("Angle minutes (0-59, no decimals): ","s");
		minTmp = minutes; minutes = str2double(minutes);
		while minutes < 0 || minutes > 59 || isnan(minutes) || any(toascii(minTmp) == 46)
			fprintf("Out of range: 0 and 59 minutes, please.\n")
			minutes = input("Angle minutes (0-59, no decimals): ","s");
			minTmp = minutes; minutes = str2double(minutes);
		endwhile
		seconds = input("Angle seconds (0-<60, may have decimal): ","s"); seconds = str2double(seconds);
		while seconds < 0 || seconds >= 60 || isnan(seconds) # okay as decimal
			fprintf("Out of range: 0 and 60 seconds, please.\n")
			seconds = input("Angle seconds (0-<60, may have decimal): ","s"); seconds = str2double(seconds);
		endwhile
		dcml1 = minutes/60;
		dcml2 = seconds/3600;
		DcmlAng = Degs + dcml1 + dcml2;
		fprintf("%d⁰ %d' %0.5f"" is %0.5f degrees.\n\n",Degs,minutes,seconds,DcmlAng)
	elseif Chs == 6 # Angle: dec to dms
		DcmlAng = input("Angle in decimal degrees (0-180⁰): ","s"); DcmlAng = str2double(DcmlAng);
		while DcmlAng < 0 || DcmlAng > 180 || isnan(DcmlAng)
			fprintf("Out of range: 0 and 180 degrees, please.\n")
			DcmlAng = input("Angle in decimal degrees (0-180⁰): ","s"); DcmlAng = str2double(DcmlAng);
		endwhile
		# Get the integer part
		intgr = fix(DcmlAng);
		Dcml = DcmlAng - intgr;
		# Get the minutes
		minutestmp = Dcml * 60;
		minutes = fix(minutestmp);
		minutesDcml = minutestmp - minutes;
		clear minutestmp
		# Get the seconds
		seconds = minutesDcml * 60;
		fprintf("%0.5f degrees is %d⁰ %d' %0.5f"".\n\n",DcmlAng,intgr,minutes,seconds)
	elseif Chs == 7 # Descent calculator
		DcntAng = input("Descent Angle (5-10⁰): ","s"); DcntAng = str2double(DcntAng);
		while DcntAng < 5 || DcntAng > 10 || isnan(DcntAng)
			fprintf("Out of range: 5 and 10 degrees, please.\n")
			DcntAng = input("Descent Angle (5-10⁰): ","s"); DcntAng = str2double(DcntAng);
		endwhile
		Altitude = input("Altitude (in feet): ","s"); Altitude = str2double(Altitude);
		while Altitude < 0 || Altitude > 50000 || isnan(Altitude)
			fprintf("Out of range: Between 0 and 50000 feet.\n")
			Altitude = input("Altitude (in feet): ","s"); Altitude = str2double(Altitude);
		endwhile
		Elevation = input("Elevation (in feet): ","s"); Elevation = str2double(Elevation);
		while Elevation < 0 || Elevation > 50000 || isnan(Elevation)
			fprintf("Out of range: Between 0 and 50000 feet.\n")
			Elevation = input("Elevation (in feet): ","s"); Elevation = str2double(Elevation);
		endwhile
		while Elevation > Altitude  #  If user has borked altitude/elevation entries, try again
			fprintf("Elevation greater than altitude.\n")
			Altitude = input("Altitude (in feet): ","s"); Altitude = str2double(Altitude);
			while Altitude < 0 || Altitude > 50000 || isnan(Altitude)
				fprintf("Out of range: Between 0 and 50000 feet.\n")
				Altitude = input("Altitude (in feet): ","s"); Altitude = str2double(Altitude);
			endwhile
			Elevation = input("Elevation (in feet): ","s"); Elevation = str2double(Elevation);
			while Elevation < 0 || Elevation > 50000 || isnan(Elevation)
				fprintf("Out of range: Between 0 and 50000 feet.\n")
				Elevation = input("Elevation (in feet): ","s"); Elevation = str2double(Elevation);
			endwhile
		endwhile
		dDistance = (Altitude - Elevation)/tand(DcntAng)*1/5280;
		fprintf("The descent should begin %0.2f miles \n(%0.2f km) away from destination.\n\n",dDistance,201168/125000*dDistance)
	elseif Chs == 8 # Quit the script and return to Shell
		clc
		fprintf("Returning to Shell...\n\n")
	endif
endwhile ######################################################################
# ------- EOF -----------------------------------------------------------------
